* the defualt compiler generated a default :
    * constructor
    * destructor
    * copy constructor
=============Copy assignement operator=================
* c++ gives us a free : 
    * copy constructor
    * copy assignement constructor, but it does a shallow copy.
  ===> anytime we use new malloc any memory allocation function
        where we have a pointer  we want to write your own 
        copy constructor
* copy assignement operator : 
    is called for when an object has been constructed

=====================the rule of three==========
* is a best practise a guideline that tries to help write 
  classes that manage external resources such as 
  dynamically allocated memory safely.
* the rule says basically if you include any one of those
  methods: 1 - destructor
           2 - copy constructor
           3 - copy assignement constructor
 in your class then you should probably include all three of them 

=====================fixed point==============
* Fixed-point representation is a way of encoding real numbers 
  within a computer using a fixed number of digits (bits) for the 
  integer and fractional parts. In this representation, 
  the position of the decimal (or binary) point is fixed, 
  meaning that the number of digits allocated for the integer 
  and fractional parts is predetermined.
* are used when floating point arithmetic is too slow
====> Why Use Fixed-Point Arithmetic?
* 1 - Performance and efficiency:
    fixed point arithmetic (addition, substraction, multiplicaion) 
    are faster and use less power than floating point 


========================(Ad-hoc polymorphism)======================
* Resolved at compile time: The appropriate function or operator 
  is determined during compilation. it differs from runtime polymorphism, 
  which involves virtual functions and inheritance.
* refers to the ability of functions or operators to behave differently
  based on their input types it is typically achieved through
  function overloading and ioerator overloading. these mechanisms allow
  multiple functions or operators to have the same name but behave
  differently depending on the argument types passed to them 
1. Function Overloading
  void print(int n);
  void print(double d);
  void print(char c);
2. Operator Overloading
  operators : +, -, *, / ....